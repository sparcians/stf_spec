name: EventRecord
enum:
  name: STF_EVENT
  val: 100
mandatory: Whenever COF condition exists due to an event external to the hart/core
fields:
  - start: 0
    end: 62
    desc: STF Exception Event ID number.
  - start: 63
    desc: |-
      Type
      ** 0 = Fault
      ** 1 = Interrupt
  - start: 64
    end: 71
    desc: Number of metadata fields
  - start: 72
    end: 135
    desc: |-
      Event metadata field 0 +
      ...
  - start: (64*n+40)
    end: (64*n+103)
    desc: |-
      Event metadata field n

      See table in the STF Exception Event and Event Meta-Data section for more details.
desc: |-
  Shall be used to capture any type of exception or external interrupt being generated in the course of program execution. (synchronous or asynchronous).

  EventRecord with STF_EVENT_MODE_CHANGE Event ID is a special meta-event, and shall be emitted any time there is a change in privilege mode of execution (e.g. User, Supervisor). It shall be emitted at the start of each trace to indicate the starting privilege mode and with any FORCE_PC_RECORD if there is a change in privilege mode of execution.
  
  This record will be associated with the instruction at which the event occurs. This instruction will appear again once it successfully executes, at a later time (e.g. upon returning from an interrupt/exception handler).
  
  If this event is a fault, thrown due to an invalid instruction encoding ( i.e. fetch issue), generator tool shall report it as a no-op, while preserving and reporting the PC that triggered the fault.
  
  Event metadata fields shail be 0-extended to 64-bit
  
  stf_dump prints this record prefixed by "EVT "

  *NOTE*: An earlier version of this specification used 32-bit values for the
  event ID. Traces using 32-bit events can still be read by invoking
  `reader.set32BitEvents(true)`.
